#ifndef _lab_event_Event_hpp_
#define _lab_event_Event_hpp_

#include <string>
#include <boost/unordered_map.hpp>

#include "lab/Exception.hpp"
#include "lab/util/Value.hpp"

namespace lab {

/*!
 * \brief The Event system relateds classes.
 */
namespace event {

class Generator;

/*!
 * \brief An Event is a thing generated by an event::Generator for an event::Listener.
 */
class Event {
	private:
		const Generator* 								mGenerator;
		std::string										mType;
		std::string 									mSubType;
		boost::unordered_map<std::string, util::Value> 	mParams;

	public:
		/*!
		 * \brief Constuctor.
		 * \param generator The generator which emits the event.
		 * \param type The event name.
		 * \param subtype The event subtype.
		 */
		Event (const Generator* generator, const std::string& type, const std::string& subtype);

		/*!
		 * \brief Destructor.
		 */
		~Event ();

		/*!
		 * \brief Get the Event's generator.
		 * \return A pointer to the Generator.
		 */
		const Generator* getGenerator () const {return mGenerator;}
	
		/*!
		 * \brief Get the Event type.
		 * \return The event type.
		 */
		const std::string& getType () const {return mType;}

		/*!
		 * \brief Get the Event subtype.
		 * \return The event subtype.
		 */
		const std::string& getSubType () const {return mSubType;}

		/*!
		 * \brief Get an Event parameter.
		 * \param name The name of the parameter to get.
		 * \return A const reference to the parameter as an util::Value.
		 * \throw lab::Exception If the parameter does not exist.
		 */
		const util::Value& getParameter (const std::string& name) const throw (lab::Exception);

		/*!
		 * \brief Add a parameter to this Event.
		 * \param name The parameter's name.
		 * \param value The parameter's value.
		 * \throw lab::Exception If the parameter already exists.
		 */
		void addParameter (const std::string& name, const util::Value& value) throw (lab::Exception);
};

}}

#endif

