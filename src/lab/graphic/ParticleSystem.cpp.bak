#include "lab/graphic/ParticleSystem.hpp"

namespace lab {
namespace graphic {

ParticleSystem::ParticleSystem (math::Vector<int> dimensions, int zindex, int max_particles) :
		Drawable (math::Vector<int> (), dimensions, math::Vector<int> (), 0.0f, zindex) {
	mMaxSize = max_particles;
	
	mParticles = new particle [mMaxSize];
	for (int i = 0; i < mMaxSize; i++) {
		mParticles [i].life = 0;
	}
	mCurrentSize = 0;
	mFirstFreeEmplacement = 0;
	
	al_set_new_bitmap_flags (ALLEGRO_VIDEO_BITMAP | ALLEGRO_MIN_LINEAR | ALLEGRO_MAG_LINEAR);
	mBuffer = al_create_bitmap (dimensions.x, dimensions.y);
}

ParticleSystem::~ParticleSystem () {
	al_destroy_bitmap (mBuffer);
	
	delete [] mParticles;
}

particle* ParticleSystem::getFreeParticle () {
	// On parcourt jusqu'à current_size voir si un emplacement est libre.
	for (int i = mFirstFreeEmplacement; i < mCurrentSize; i++) {
		if (mParticles [i].life <= 0) {
			return &(mParticles [i]);
			mFirstFreeEmplacement = i + 1;
		}
	}
	
	// Si non, on regarde si current size est inférieur à max size, et on rajoute une particule à la fin.
	if (mCurrentSize < mMaxSize) {
		mCurrentSize++;
		return &(mParticles [mCurrentSize - 1]);
		mFirstFreeEmplacement = mCurrentSize;
	}

	// Et enfin, si la liste des particules est pleine, on renvoit NULL.
	return NULL;
}

void ParticleSystem::update () {
	for (int i = 0; i < mCurrentSize; i++) {
		particle* part = &(mParticles [i]);
	
		if (part->life > 0) {
			part->life--;
			part->sx += part->ax;
			part->sy += part->ay;
			part->x += part->sx;
			part->y += part->sy;
		}
		else if (mFirstFreeEmplacement > i) {
			mFirstFreeEmplacement = i;
		}
	}
	
	while (mParticles [mCurrentSize - 1].life == 0 && mCurrentSize > 0) {
		mCurrentSize--;
	}
}

void ParticleSystem::draw () const {
	// Store current states.
	ALLEGRO_BITMAP* pushed_buffer;
	ALLEGRO_TRANSFORM pushed_transform;
	al_copy_transform (&pushed_transform, al_get_current_transform ());
	pushed_buffer = al_get_target_bitmap ();
	int op, src, dest;
	al_get_blender (&op, &src, &dest);
	
	// Changing target buffer.
	al_set_target_bitmap (mBuffer);
	ALLEGRO_TRANSFORM transform;
	al_identity_transform (&transform);
	al_use_transform (&transform);
	
	// Setting a blender.
	al_set_blender (ALLEGRO_ADD, ALLEGRO_ONE, ALLEGRO_ONE);
	
	// Draw the particles
	al_clear_to_color (al_map_rgba (0, 0, 0, 0));
	for (int i = 0; i < mCurrentSize; i++) {
		particle* part = &(mParticles [i]);
	
		if (part->life > 0) {
			al_draw_tinted_scaled_bitmap (	part->bitmap, 
											part->color,
											0, 0, al_get_bitmap_width (part->bitmap), 
										  	al_get_bitmap_height (part->bitmap),
											part->x, part->y, part->w, part->h,
											0
								  		 );
		}
	}
	
	// Restore saved states.
	al_set_target_bitmap (pushed_buffer);
	al_use_transform (&pushed_transform);
	al_set_blender (op, src, dest);
	al_draw_bitmap (mBuffer, 0, 0, 0); // TODO - Use al_draw_scaled_bitmap (faster than transformation ?).
	
	// Done !
}

void ParticleSystem::clearParticles () {
	for (int i = 0; i < mCurrentSize; i++) {
		mParticles [i].life = 0;
	}
	mCurrentSize = 0;
	mFirstFreeEmplacement = 0;
}

}}


